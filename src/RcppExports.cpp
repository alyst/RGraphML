// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// DataFrameToGraphML
std::string DataFrameToGraphML(const Rcpp::DataFrame& nodes, const Rcpp::DataFrame& edges, const std::string& nodeIdCol, const Rcpp::String& parentIdCol, const std::string& sourceCol, const std::string& targetCol, const Rcpp::CharacterVector& nodeAttrs, const Rcpp::CharacterVector& edgeAttrs, bool isDirected);
RcppExport SEXP _RGraphML_DataFrameToGraphML(SEXP nodesSEXP, SEXP edgesSEXP, SEXP nodeIdColSEXP, SEXP parentIdColSEXP, SEXP sourceColSEXP, SEXP targetColSEXP, SEXP nodeAttrsSEXP, SEXP edgeAttrsSEXP, SEXP isDirectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type nodeIdCol(nodeIdColSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String& >::type parentIdCol(parentIdColSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type sourceCol(sourceColSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type targetCol(targetColSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type nodeAttrs(nodeAttrsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type edgeAttrs(edgeAttrsSEXP);
    Rcpp::traits::input_parameter< bool >::type isDirected(isDirectedSEXP);
    rcpp_result_gen = Rcpp::wrap(DataFrameToGraphML(nodes, edges, nodeIdCol, parentIdCol, sourceCol, targetCol, nodeAttrs, edgeAttrs, isDirected));
    return rcpp_result_gen;
END_RCPP
}
// DataFrameToTulip
std::string DataFrameToTulip(const Rcpp::DataFrame& nodes, const Rcpp::DataFrame& edges, const std::string& nodeIdCol, const Rcpp::String& parentIdCol, const std::string& edgeIdCol, const std::string& sourceCol, const std::string& targetCol, const Rcpp::CharacterVector& nodeAttrs, const Rcpp::CharacterVector& edgeAttrs, bool isDirected);
RcppExport SEXP _RGraphML_DataFrameToTulip(SEXP nodesSEXP, SEXP edgesSEXP, SEXP nodeIdColSEXP, SEXP parentIdColSEXP, SEXP edgeIdColSEXP, SEXP sourceColSEXP, SEXP targetColSEXP, SEXP nodeAttrsSEXP, SEXP edgeAttrsSEXP, SEXP isDirectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type nodeIdCol(nodeIdColSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String& >::type parentIdCol(parentIdColSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type edgeIdCol(edgeIdColSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type sourceCol(sourceColSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type targetCol(targetColSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type nodeAttrs(nodeAttrsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type edgeAttrs(edgeAttrsSEXP);
    Rcpp::traits::input_parameter< bool >::type isDirected(isDirectedSEXP);
    rcpp_result_gen = Rcpp::wrap(DataFrameToTulip(nodes, edges, nodeIdCol, parentIdCol, edgeIdCol, sourceCol, targetCol, nodeAttrs, edgeAttrs, isDirected));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RGraphML_DataFrameToGraphML", (DL_FUNC) &_RGraphML_DataFrameToGraphML, 9},
    {"_RGraphML_DataFrameToTulip", (DL_FUNC) &_RGraphML_DataFrameToTulip, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_RGraphML(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
